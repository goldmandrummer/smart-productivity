[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nLet's start by defining the structure of our project. We will have the following files:\n\n- `main.py`: This is the entry point of our application. It will handle the user interaction and call the appropriate functions based on user input.\n- `task_manager.py`: This file will contain the `TaskManager` class which will handle all task related operations such as adding, updating, deleting tasks etc.\n- `task.py`: This file will contain the `Task` class which will represent a task.\n- `storage.py`: This file will contain the `Storage` class which will handle all file related operations such as reading and writing tasks to a file.\n- `requirements.txt`: This file will contain all the dependencies required for our project.\n\nLet's start by creating the `Task` class:\n\ntask.py\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime\n\n@dataclass\nclass Task:\n    id: int\n    name: str\n    due_date: datetime\n    duration: int\n    priority: int\n    is_recurring: bool\n```\n\nNext, we will create the `Storage` class:\n\nstorage.py\n```python\nimport json\nfrom typing import List\nfrom task import Task\n\nclass Storage:\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n\n    def read_tasks(self) -> List[Task]:\n        with open(self.file_path, 'r') as file:\n            tasks = json.load(file)\n            return [Task(**task) for task in tasks]\n\n    def write_tasks(self, tasks: List[Task]):\n        with open(self.file_path, 'w') as file:\n            json.dump([task.__dict__ for task in tasks], file)\n```\n\nNext, we will create the `TaskManager` class:\n\ntask_manager.py\n```python\nfrom typing import List\nfrom task import Task\nfrom storage import Storage\n\nclass TaskManager:\n    def __init__(self, storage: Storage):\n        self.storage = storage\n        self.tasks = self.storage.read_tasks()\n\n    def add_task(self, task: Task):\n        self.tasks.append(task)\n        self.storage.write_tasks(self.tasks)\n\n    def update_task(self, task: Task):\n        for i, t in enumerate(self.tasks):\n            if t.id == task.id:\n                self.tasks[i] = task\n                self.storage.write_tasks(self.tasks)\n                return\n        raise ValueError(\"Task not found\")\n\n    def delete_task(self, task_id: int):\n        for i, t in enumerate(self.tasks):\n            if t.id == task_id:\n                del self.tasks[i]\n                self.storage.write_tasks(self.tasks)\n                return\n        raise ValueError(\"Task not found\")\n\n    def get_top_priority_tasks(self, count: int) -> List[Task]:\n        return sorted(self.tasks, key=lambda t: t.priority, reverse=True)[:count]\n```\n\nFinally, we will create the `main.py` file:\n\nmain.py\n```python\nfrom task_manager import TaskManager\nfrom task import Task\nfrom storage import Storage\nfrom datetime import datetime\n\ndef main():\n    storage = Storage('tasks.json')\n    task_manager = TaskManager(storage)\n\n    while True:\n        top_tasks = task_manager.get_top_priority_tasks(3)\n        for task in top_tasks:\n            print(task)\n\n        print(\"1. Add task\")\n        print(\"2. Update task\")\n        print(\"3. Delete task\")\n        print(\"4. Exit\")\n\n        choice = input(\"Enter your choice: \")\n\n        if choice == '1':\n            id = int(input(\"Enter task id: \"))\n            name = input(\"Enter task name: \")\n            due_date = datetime.strptime(input(\"Enter due date (yyyy-mm-dd): \"), \"%Y-%m-%d\")\n            duration = int(input(\"Enter task duration: \"))\n            priority = int(input(\"Enter task priority: \"))\n            is_recurring = input(\"Is the task recurring (yes/no): \") == 'yes'\n            task = Task(id, name, due_date, duration, priority, is_recurring)\n            task_manager.add_task(task)\n        elif choice == '2':\n            id = int(input(\"Enter task id: \"))\n            name = input(\"Enter task name: \")\n            due_date = datetime.strptime(input(\"Enter due date (yyyy-mm-dd): \"), \"%Y-%m-%d\")\n            duration = int(input(\"Enter task duration: \"))\n            priority = int(input(\"Enter task priority: \"))\n            is_recurring = input(\"Is the task recurring (yes/no): \") == 'yes'\n            task = Task(id, name, due_date, duration, priority, is_recurring)\n            task_manager.update_task(task)\n        elif choice == '3':\n            id = int(input(\"Enter task id: \"))\n            task_manager.delete_task(id)\n        elif choice == '4':\n            break\n        else:\n            print(\"Invalid choice\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nAnd the `requirements.txt` file:\n\nrequirements.txt\n```\ndataclasses\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "```bash\npython3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n```\n```bash\npython main.py\n```", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]